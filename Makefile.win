# Windows-compatible Makefile for Library Management System

# Compiler and flags
CC = gcc
CFLAGS = -Wall -Wextra -std=c11 -g -O0
LDFLAGS =

# Directories
SRCDIR = src
INCDIR = include
OBJDIR = obj
TESTDIR = tests
EXAMPLEDIR = examples

# Target executable
TARGET = library_system.exe
TEST_TARGET = test_runner.exe

# Find all source files
CORE_SOURCES = $(wildcard $(SRCDIR)/core/*.c)
MODEL_SOURCES = $(wildcard $(SRCDIR)/models/*.c)
REPO_SOURCES = $(wildcard $(SRCDIR)/repositories/*.c)
SERVICE_SOURCES = $(wildcard $(SRCDIR)/services/*.c)
UI_SOURCES = $(wildcard $(SRCDIR)/ui/*.c)
COMMON_SOURCES = $(wildcard $(SRCDIR)/*.c)

# All source files except main
LIB_SOURCES = $(CORE_SOURCES) $(MODEL_SOURCES) $(REPO_SOURCES) $(SERVICE_SOURCES) $(UI_SOURCES) $(COMMON_SOURCES)

# Object files
LIB_OBJECTS = $(LIB_SOURCES:$(SRCDIR)/%.c=$(OBJDIR)/%.o)

# Test source files
TEST_SOURCES = $(wildcard $(TESTDIR)/*.c)
TEST_OBJECTS = $(TEST_SOURCES:$(TESTDIR)/%.c=$(OBJDIR)/test/%.o)

# Include paths
INCLUDES = -I$(INCDIR)

# Windows shell commands
ifeq ($(OS),Windows_NT)
    MKDIR = if not exist $(1) mkdir $(1)
    RMDIR = if exist $(1) rmdir /s /q $(1)
    RM = if exist $(1) del /q $(1)
    SEP = \\
else
    MKDIR = mkdir -p $(1)
    RMDIR = rm -rf $(1)
    RM = rm -f $(1)
    SEP = /
endif

# Default target
all: $(TARGET)

# Create directories
create_dirs:
	@if not exist obj mkdir obj
	@if not exist obj\core mkdir obj\core
	@if not exist obj\models mkdir obj\models
	@if not exist obj\repositories mkdir obj\repositories
	@if not exist obj\services mkdir obj\services
	@if not exist obj\ui mkdir obj\ui
	@if not exist obj\test mkdir obj\test

# Build main executable
$(TARGET): create_dirs $(LIB_OBJECTS) $(OBJDIR)/main.o
	$(CC) $(LIB_OBJECTS) $(OBJDIR)/main.o -o $@ $(LDFLAGS)

# Build main.o
$(OBJDIR)/main.o: main.c
	$(CC) $(CFLAGS) $(INCLUDES) -c $< -o $@

# Build library object files
$(OBJDIR)/core/%.o: $(SRCDIR)/core/%.c
	$(CC) $(CFLAGS) $(INCLUDES) -c $< -o $@

$(OBJDIR)/models/%.o: $(SRCDIR)/models/%.c
	$(CC) $(CFLAGS) $(INCLUDES) -c $< -o $@

$(OBJDIR)/repositories/%.o: $(SRCDIR)/repositories/%.c
	$(CC) $(CFLAGS) $(INCLUDES) -c $< -o $@

$(OBJDIR)/services/%.o: $(SRCDIR)/services/%.c
	$(CC) $(CFLAGS) $(INCLUDES) -c $< -o $@

$(OBJDIR)/ui/%.o: $(SRCDIR)/ui/%.c
	$(CC) $(CFLAGS) $(INCLUDES) -c $< -o $@

$(OBJDIR)/%.o: $(SRCDIR)/%.c
	$(CC) $(CFLAGS) $(INCLUDES) -c $< -o $@

# Build test runner
test: create_dirs $(LIB_OBJECTS) $(TEST_OBJECTS)
	$(CC) $(LIB_OBJECTS) $(TEST_OBJECTS) -o $(TEST_TARGET) $(LDFLAGS)
	$(TEST_TARGET)

# Build test object files
$(OBJDIR)/test/%.o: $(TESTDIR)/%.c
	$(CC) $(CFLAGS) $(INCLUDES) -c $< -o $@

# Debug build
debug: CFLAGS += -DDEBUG
debug: $(TARGET)

# Release build
release: CFLAGS = -Wall -Wextra -std=c11 -O2 -DNDEBUG
release: $(TARGET)

# Help target
help:
	@echo Available targets:
	@echo   all          - Build the main executable (default)
	@echo   test         - Build and run tests
	@echo   debug        - Build with debug symbols
	@echo   release      - Build optimized release version
	@echo   clean        - Remove build artifacts
	@echo   help         - Show this help message

# Clean build artifacts
clean:
	@if exist obj rmdir /s /q obj
	@if exist $(TARGET) del /q $(TARGET)
	@if exist $(TEST_TARGET) del /q $(TEST_TARGET)
	@if exist *.o del /q *.o

# Phony targets
.PHONY: all test debug release clean help create_dirs